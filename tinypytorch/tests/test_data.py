# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_tests.test_data.ipynb.

# %% auto 0
__all__ = ['dataset', 'test_get_dataset', 'test_dataset_shape', 'test_sample_data']

# %% ../../nbs/01_tests.test_data.ipynb 1
import torch
import torch.nn.functional as F

from fastcore.utils import *
from ..core import *
from ..data import get_sample_data, get_local_data

import pytest

# %% ../../nbs/01_tests.test_data.ipynb 3
@pytest.fixture
def dataset():
    return get_local_data()

# %% ../../nbs/01_tests.test_data.ipynb 4
def test_get_dataset(dataset):
    x_train, y_train, x_valid, y_valid = dataset
    assert type(x_train) is torch.Tensor
    assert type(y_train) is torch.Tensor
    assert type(x_valid) is torch.Tensor
    assert type(y_valid) is torch.Tensor

# %% ../../nbs/01_tests.test_data.ipynb 7
def test_dataset_shape(dataset):
    x_train, y_train, x_valid, y_valid = dataset
    
    # test number of images equals to number of labels in training set
    assert x_train.shape[0] == y_train.shape[0]
    
    # test number of pixels in training set and validation set
    assert x_train.shape[1] == x_valid.shape[1]
    
    # test number of images equals to number of labels in validation set
    assert x_valid.shape[0] == y_valid.shape[0]

# %% ../../nbs/01_tests.test_data.ipynb 8
def test_sample_data():
    pass
